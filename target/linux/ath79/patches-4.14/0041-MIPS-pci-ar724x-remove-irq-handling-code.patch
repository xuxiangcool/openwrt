From 12d941b9836a91d44ecd576916d212d1319e9d0a Mon Sep 17 00:00:00 2001
From: Chuanhong Guo <gch981213@gmail.com>
Date: Thu, 4 Oct 2018 15:52:56 +0800
Subject: [PATCH] MIPS: pci-ar724x: remove irq handling code

They can be completedly replaced by qca,ar7100-misc-intc.

Signed-off-by: Chuanhong Guo <gch981213@gmail.com>
---
 arch/mips/pci/pci-ar724x.c | 111 -------------------------------------
 1 file changed, 111 deletions(-)

--- a/arch/mips/pci/pci-ar724x.c
+++ b/arch/mips/pci/pci-ar724x.c
@@ -9,30 +9,21 @@
  *  by the Free Software Foundation.
  */
 
-#include <linux/irq.h>
 #include <linux/pci.h>
 #include <linux/init.h>
 #include <linux/delay.h>
 #include <linux/platform_device.h>
-#include <linux/irqchip/chained_irq.h>
 #include <asm/mach-ath79/ath79.h>
 #include <asm/mach-ath79/ar71xx_regs.h>
-#include <linux/of_irq.h>
 #include <linux/of_pci.h>
 
 #define AR724X_PCI_REG_APP		0x00
 #define AR724X_PCI_REG_RESET		0x18
-#define AR724X_PCI_REG_INT_STATUS	0x4c
-#define AR724X_PCI_REG_INT_MASK		0x50
 
 #define AR724X_PCI_APP_LTSSM_ENABLE	BIT(0)
 
 #define AR724X_PCI_RESET_LINK_UP	BIT(0)
 
-#define AR724X_PCI_INT_DEV0		BIT(14)
-
-#define AR724X_PCI_IRQ_COUNT		1
-
 #define AR7240_BAR0_WAR_VALUE	0xffff
 
 #define AR724X_PCI_CMD_INIT	(PCI_COMMAND_MEMORY |		\
@@ -47,21 +38,16 @@ struct ar724x_pci_controller {
 	void __iomem *ctrl_base;
 	void __iomem *crp_base;
 
-	int irq;
-
 	bool link_up;
 	bool bar0_is_cached;
 	u32  bar0_value;
 
 	struct device_node *np;
 	struct pci_controller pci_controller;
-	struct irq_domain *domain;
 	struct resource io_res;
 	struct resource mem_res;
 };
 
-static struct irq_chip ar724x_pci_irq_chip;
-
 static inline bool ar724x_pci_check_link(struct ar724x_pci_controller *apc)
 {
 	u32 reset;
@@ -235,108 +221,6 @@ static struct pci_ops ar724x_pci_ops = {
 	.write	= ar724x_pci_write,
 };
 
-static void ar724x_pci_irq_handler(struct irq_desc *desc)
-{
-	struct irq_chip *chip = irq_desc_get_chip(desc);
-	struct ar724x_pci_controller *apc = irq_desc_get_handler_data(desc);
-	u32 pending;
-
-	chained_irq_enter(chip, desc);
-	pending = __raw_readl(apc->ctrl_base + AR724X_PCI_REG_INT_STATUS) &
-		  __raw_readl(apc->ctrl_base + AR724X_PCI_REG_INT_MASK);
-
-	if (pending & AR724X_PCI_INT_DEV0)
-		generic_handle_irq(irq_linear_revmap(apc->domain, 1));
-	else
-		spurious_interrupt();
-	chained_irq_exit(chip, desc);
-}
-
-static void ar724x_pci_irq_unmask(struct irq_data *d)
-{
-	struct ar724x_pci_controller *apc;
-	void __iomem *base;
-	u32 t;
-
-	apc = irq_data_get_irq_chip_data(d);
-	base = apc->ctrl_base;
-
-	switch (irq_linear_revmap(apc->domain, d->irq)) {
-	case 0:
-		t = __raw_readl(base + AR724X_PCI_REG_INT_MASK);
-		__raw_writel(t | AR724X_PCI_INT_DEV0,
-			     base + AR724X_PCI_REG_INT_MASK);
-		/* flush write */
-		__raw_readl(base + AR724X_PCI_REG_INT_MASK);
-	}
-}
-
-static void ar724x_pci_irq_mask(struct irq_data *d)
-{
-	struct ar724x_pci_controller *apc;
-	void __iomem *base;
-	u32 t;
-
-	apc = irq_data_get_irq_chip_data(d);
-	base = apc->ctrl_base;
-
-	switch (irq_linear_revmap(apc->domain, d->irq)) {
-	case 0:
-		t = __raw_readl(base + AR724X_PCI_REG_INT_MASK);
-		__raw_writel(t & ~AR724X_PCI_INT_DEV0,
-			     base + AR724X_PCI_REG_INT_MASK);
-
-		/* flush write */
-		__raw_readl(base + AR724X_PCI_REG_INT_MASK);
-
-		t = __raw_readl(base + AR724X_PCI_REG_INT_STATUS);
-		__raw_writel(t | AR724X_PCI_INT_DEV0,
-			     base + AR724X_PCI_REG_INT_STATUS);
-
-		/* flush write */
-		__raw_readl(base + AR724X_PCI_REG_INT_STATUS);
-	}
-}
-
-static struct irq_chip ar724x_pci_irq_chip = {
-	.name		= "AR724X PCI ",
-	.irq_mask	= ar724x_pci_irq_mask,
-	.irq_unmask	= ar724x_pci_irq_unmask,
-	.irq_mask_ack	= ar724x_pci_irq_mask,
-};
-
-static int ar724x_pci_irq_map(struct irq_domain *d,
-			      unsigned int irq, irq_hw_number_t hw)
-{
-	struct ar724x_pci_controller *apc = d->host_data;
-
-	irq_set_chip_and_handler(irq, &ar724x_pci_irq_chip, handle_level_irq);
-	irq_set_chip_data(irq, apc);
-
-	return 0;
-}
-
-static const struct irq_domain_ops ar724x_pci_domain_ops = {
-	.xlate = irq_domain_xlate_onecell,
-	.map = ar724x_pci_irq_map,
-};
-
-static void ar724x_pci_irq_init(struct ar724x_pci_controller *apc,
-				int id)
-{
-	void __iomem *base;
-
-	base = apc->ctrl_base;
-
-	__raw_writel(0, base + AR724X_PCI_REG_INT_MASK);
-	__raw_writel(0, base + AR724X_PCI_REG_INT_STATUS);
-
-	apc->domain = irq_domain_add_linear(apc->np, 2,
-					    &ar724x_pci_domain_ops, apc);
-	irq_set_chained_handler_and_data(apc->irq, ar724x_pci_irq_handler,
-					 apc);
-}
-
 static void ar724x_pci_hw_init(struct ar724x_pci_controller *apc)
 {
 	u32 ppl, app;
@@ -398,10 +282,6 @@ static int ar724x_pci_probe(struct platf
 	if (IS_ERR(apc->crp_base))
 		return PTR_ERR(apc->crp_base);
 
-	apc->irq = platform_get_irq(pdev, 0);
-	if (apc->irq < 0)
-		return -EINVAL;
-
 	apc->np = pdev->dev.of_node;
 	apc->pci_controller.pci_ops = &ar724x_pci_ops;
 	apc->pci_controller.io_resource = &apc->io_res;
@@ -419,8 +299,6 @@ static int ar724x_pci_probe(struct platf
 	if (!apc->link_up)
 		dev_warn(&pdev->dev, "PCIe link is down\n");
 
-	ar724x_pci_irq_init(apc, id);
-
 	ar724x_pci_local_write(apc, PCI_COMMAND, 4, AR724X_PCI_CMD_INIT);
 
 	register_pci_controller(&apc->pci_controller);
